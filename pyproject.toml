[build-system]
requires = ["hatchling>=1.4"]
build-backend = "hatchling.build"

[project]
name = "jupyter_core"
description = "Jupyter core package. A base package on which Jupyter projects rely."
license = { file = "LICENSE" }
classifiers = [
  "Framework :: Jupyter",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3"
]
requires-python = ">=3.8"
dependencies = [
  "platformdirs>=2.5",
  "traitlets>=5.3",
  "pywin32>=300 ; sys_platform == 'win32' and platform_python_implementation != 'PyPy'"
]
dynamic = ["version"]

[[project.authors]]
name = "Jupyter Development Team"
email = "jupyter@googlegroups.org"

[project.readme]
text = "There is no reason to install this package on its own."
content-type = "text/plain"

[project.urls]
Homepage = "https://jupyter.org"
Documentation = "https://jupyter-core.readthedocs.io/"
Funding = "https://numfocus.org/"
Source = "https://github.com/jupyter/jupyter_core"
Tracker = "https://github.com/jupyter/jupyter_core/issues"

[project.optional-dependencies]
test = [
  "ipykernel",
  "pre-commit",
  "pytest",
  "pytest-cov",
  "pytest-timeout"
]
docs = [
  "myst-parser",
  "sphinxcontrib_github_alt",
  "sphinxcontrib_spelling",
  "sphinx-autodoc-typehints",
  "traitlets",
  "pydata_sphinx_theme",
]

[project.scripts]
jupyter = "jupyter_core.command:main"
jupyter-migrate = "jupyter_core.migrate:main"
jupyter-troubleshoot = "jupyter_core.troubleshoot:main"

[tool.hatch.version]
path = "jupyter_core/version.py"

[tool.hatch.build.force-include]
"./jupyter.py" = "jupyter.py"

[tool.hatch.envs.docs]
features = ["docs"]
[tool.hatch.envs.docs.env-vars]
SPHINXOPTS = "-W -n"
[tool.hatch.envs.docs.scripts]
build = "make -C docs html"
api = "sphinx-apidoc -o docs/api -f -E jupyter_core jupyter_core/tests/*"

[tool.hatch.envs.test]
features = ["test"]
[tool.hatch.envs.test.scripts]
test = "python -m pytest -vv {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.cov]
features = ["test"]
dependencies = ["coverage", "pytest-cov"]
[tool.hatch.envs.cov.scripts]
test = "python -m pytest -vv --cov jupyter_core --cov-branch --cov-report term-missing:skip-covered {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.typing]
features = ["test"]
dependencies = ["mypy~=1.6.0", "traitlets>=5.13.0"]
[tool.hatch.envs.typing.scripts]
test = "mypy --install-types --non-interactive {args}"

[tool.hatch.envs.lint]
dependencies = ["mdformat>0.7", "ruff==0.1.3"]
detached = true
[tool.hatch.envs.lint.scripts]
style = [
  "ruff {args:.}",
  "ruff format {args:.}",
  "mdformat --check {args:*.md}"
]
fmt = [
  "ruff --fix {args:.}",
  "ruff format {args:.}",
  "mdformat {args:*.md}"
]

[tool.mypy]
files = "jupyter_core"
python_version = "3.8"
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "6.0"
xfail_strict = true
log_cli_level = "info"
addopts = [
  "-raXs", "--durations=10", "--color=yes", "--doctest-modules",
   "--showlocals", "--strict-markers", "--strict-config",
   "--ignore-glob=tests/dotipython*"
]
testpaths = [
    "tests/"
]
filterwarnings= [
  # Fail on warnings
  "error",
  # Expected internal warnings
  "module:Jupyter is migrating its paths to use standard platformdirs:DeprecationWarning",
]

[tool.coverage.run]
relative_files = true
source = ["jupyter_core"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\bProtocol\\):",
"@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 100

[tool.ruff.lint]
select = [
  "A", "B", "C", "DTZ", "E", "EM", "F", "FBT", "I", "ICN", "N",
  "PLC", "PLE", "PLR", "PLW", "Q", "RUF", "S", "SIM", "T", "TID", "UP",
  "W", "YTT",
]
ignore = [
  # Q000 Single quotes found but double quotes preferred
  "Q000",
  # FBT001 Boolean positional arg in function definition
  "FBT001", "FBT002", "FBT003",
  # E501 Line too long (158 > 100 characters)
  "E501",
  # SIM105 Use `contextlib.suppress(...)`
  "SIM105",
]
unfixable = [
  # Don't touch print statements
  "T201",
  # Don't touch noqa lines
  "RUF100",
]

[tool.ruff.lint.per-file-ignores]
# B011 Do not call assert False since python -O removes these calls
# F841 local variable 'foo' is assigned to but never used
# C408 Unnecessary `dict` call
# E402 Module level import not at top of file
# T201 `print` found
# B007 Loop control variable `i` not used within the loop body.
# N802 Function name `assertIn` should be lowercase
# S101 Use of `assert` detected
# S108 Probable insecure usage of temporary file or directory: "/tmp"
# PLR2004 Magic value used in comparison, consider replacing b'WITNESS A' with a constant variable
# S603 `subprocess` call: check for execution of untrusted input
"tests/*" = ["B011", "F841", "C408", "E402", "T201", "B007", "N802", "S101", "S108", "PLR2004", "S603"]
# F821 Undefined name `get_config`
"tests/**/profile_default/*_config.py" = ["F821"]
# T201 `print` found
"jupyter_core/application.py" = ["T201"]
"jupyter_core/command.py" = ["T201"]
"jupyter_core/troubleshoot.py" = ["T201"]
# N802 Function name `SetFileSecurity` should be lowercase
"jupyter_core/paths.py" = ["N802", "N803", "N806"]
# C901 Function is too complex
"jupyter_core/migrate.py" = ["C901"]  # `migrate_static_custom` is too complex (11 > 10)

[tool.interrogate]
ignore-init-module=true
ignore-private=true
ignore-semiprivate=true
ignore-property-decorators=true
ignore-nested-functions=true
ignore-nested-classes=true
fail-under=100
exclude = ["docs", "tests"]

[tool.check-wheel-contents]
toplevel = ["jupyter_core/", "jupyter.py"]
ignore = ["W002"]

[tool.repo-review]
ignore = ["PY007", "PP308", "GH102", "PC140"]
